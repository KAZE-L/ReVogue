generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  name         String?
  role         UserRole   @default(buyer)
  googleId     String?    @map("google_id")
  avatarUrl    String?    @map("avatar_url")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  cartItems    Cart[]
  favorites    Favorite[]
  buyerOrders  Order[]    @relation("BuyerOrders")
  sellerOrders Order[]    @relation("SellerOrders")
  products     Product[]  @relation("SellerProducts")
  wardrobe     Wardrobe[]

  @@map("users")
}

model Product {
  id          Int           @id @default(autoincrement())
  sellerId    Int           @map("seller_id")
  name        String
  description String
  price       Decimal
  category    String
  styleTags   Json          @map("style_tags")
  images      Json
  status      ProductStatus @default(active)
  viewCount   Int           @default(0) @map("view_count")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  cartItems   Cart[]
  favorites   Favorite[]
  orderItems  OrderItem[]
  seller      User          @relation("SellerProducts", fields: [sellerId], references: [id])
  wardrobe    Wardrobe[]

  @@map("products")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("favorites")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId], name: "cart_user_product_unique")
  @@map("carts")
}

model Order {
  id              Int         @id @default(autoincrement())
  buyerId         Int         @map("buyer_id")
  sellerId        Int         @map("seller_id")
  totalAmount     Decimal     @map("total_amount")
  status          OrderStatus @default(pending)
  paymentMethod   String      @map("payment_method")
  shippingAddress String      @map("shipping_address")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  items           OrderItem[]
  buyer           User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller          User        @relation("SellerOrders", fields: [sellerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now()) @map("created_at")
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Wardrobe {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("wardrobe")
}

enum UserRole {
  buyer
  seller
}

enum ProductStatus {
  active
  sold
  inactive
}

enum OrderStatus {
  pending
  paid
  shipped
  completed
  cancelled
}
